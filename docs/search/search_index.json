{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"An independent implementation of the Signal protocol Used with the client/server for sending messages. Maybe an email replacement using JMAP. Notes \u00b6 The Signal protocol is good, but its limited to usage with Signal the app. There are open source libraries, but they havent been updated on Github in a long time. The recommended library is written in Java. Email is better as a messaging platform, but its old and frought with issues. Some email providers are centralised, because the average person doesnt care, and just wants email without faff. Other organisations want to self host because of trust and downtime. Likewise some organisations have compliance or security requirements so they have to self host. Email is incredibly hard to self host at the moment. ISPs and big mail providers block residential IP blocks because of the high likelihood of spam. Need to consider the problems shown on https://craphound.com/spamsolutions.txt Proposed Solution: JMAP protocol Signal protocol Strict enforcement of SPF/DKIM/DMARC/More acronyms... Initial proof of concept using Python+FastAPI+PyNaCl Eventually Rust or Ada/Spark + SparkNaCl for crypto and the server Simple config, setup etc. Give it a domain name, it checks itself to make sure ^ acronyms are in place, then starts. Use DNSSEC+DANE? Store signal keys in key transparency? Thats how people find out emails addresses of others and find out the keys Should we support HTML? It can be used as attack vector, scripts, malicious images, tracking pixels etc. Maybe a subset of HTML? Or Gemini? Or just plain text...? How to handle user authentication? user+pass, LDAP? oauth? Key transparency Have a hash of the email address with its signal key(s). A hash rather than the email address itself so that it isnt publicly exposed. Should it be a global system like DNS, or one maintained per domain? Maybe both? DNS is public for public facing email, then individual orgs have their own internal DNS for internal only traffic. https://sigstore.dev/ Force TLS connections between servers. Minimum TLS ver is 1.3.","title":"Home"},{"location":"#notes","text":"The Signal protocol is good, but its limited to usage with Signal the app. There are open source libraries, but they havent been updated on Github in a long time. The recommended library is written in Java. Email is better as a messaging platform, but its old and frought with issues. Some email providers are centralised, because the average person doesnt care, and just wants email without faff. Other organisations want to self host because of trust and downtime. Likewise some organisations have compliance or security requirements so they have to self host. Email is incredibly hard to self host at the moment. ISPs and big mail providers block residential IP blocks because of the high likelihood of spam. Need to consider the problems shown on https://craphound.com/spamsolutions.txt Proposed Solution: JMAP protocol Signal protocol Strict enforcement of SPF/DKIM/DMARC/More acronyms... Initial proof of concept using Python+FastAPI+PyNaCl Eventually Rust or Ada/Spark + SparkNaCl for crypto and the server Simple config, setup etc. Give it a domain name, it checks itself to make sure ^ acronyms are in place, then starts. Use DNSSEC+DANE? Store signal keys in key transparency? Thats how people find out emails addresses of others and find out the keys Should we support HTML? It can be used as attack vector, scripts, malicious images, tracking pixels etc. Maybe a subset of HTML? Or Gemini? Or just plain text...? How to handle user authentication? user+pass, LDAP? oauth? Key transparency Have a hash of the email address with its signal key(s). A hash rather than the email address itself so that it isnt publicly exposed. Should it be a global system like DNS, or one maintained per domain? Maybe both? DNS is public for public facing email, then individual orgs have their own internal DNS for internal only traffic. https://sigstore.dev/ Force TLS connections between servers. Minimum TLS ver is 1.3.","title":"Notes"},{"location":"jmap-protocol/","text":"","title":"Jmap protocol"},{"location":"signal-protocol/","text":"","title":"Signal protocol"},{"location":"why/","text":"Backwards compatibility \u00b6 Email has been plagued by problems from the beginning. Encryption of messages and trust of the network were not seen as vital. So it is plain text and anyone can email anyone. Complexity \u00b6 Its grown to have lots of protocols and RFCs. It always needs backwards compatibility to work with all providers. Identity \u00b6 An email address is often used as the core identity for people on the internet. Its the username, then services send an email with a special link to validate that the user owns that email address. Security \u00b6 I've worked for big companies with high security requirements. They use self hosted MS Exchange because its the easiest option. A lot are now moving to O365 because they dont want the burden of managing email. Spam \u00b6 We arent going to be eliminating spam. It'll be computationally more expensive/difficult because of the signal encryption. It'll be harder to detect email addresses, but once they're known to a spammer they're not going to be blocked necessarily. Key Transparency might help in that bad domains could be blocked at the KT level. Maybe we need a domain / organisation level signal key? To authenticate that the email came from that domains ANK servers and that domain. A lot of the emails that I get are too complicated. What type of emails do I want? Bills/receipts from companies when I pay them. User authentication. Sending messages to people. Thats it. No images, no fancy borders and colours, no fuss, just text.","title":"Why"},{"location":"why/#backwards-compatibility","text":"Email has been plagued by problems from the beginning. Encryption of messages and trust of the network were not seen as vital. So it is plain text and anyone can email anyone.","title":"Backwards compatibility"},{"location":"why/#complexity","text":"Its grown to have lots of protocols and RFCs. It always needs backwards compatibility to work with all providers.","title":"Complexity"},{"location":"why/#identity","text":"An email address is often used as the core identity for people on the internet. Its the username, then services send an email with a special link to validate that the user owns that email address.","title":"Identity"},{"location":"why/#security","text":"I've worked for big companies with high security requirements. They use self hosted MS Exchange because its the easiest option. A lot are now moving to O365 because they dont want the burden of managing email.","title":"Security"},{"location":"why/#spam","text":"We arent going to be eliminating spam. It'll be computationally more expensive/difficult because of the signal encryption. It'll be harder to detect email addresses, but once they're known to a spammer they're not going to be blocked necessarily. Key Transparency might help in that bad domains could be blocked at the KT level. Maybe we need a domain / organisation level signal key? To authenticate that the email came from that domains ANK servers and that domain. A lot of the emails that I get are too complicated. What type of emails do I want? Bills/receipts from companies when I pay them. User authentication. Sending messages to people. Thats it. No images, no fancy borders and colours, no fuss, just text.","title":"Spam"}]}